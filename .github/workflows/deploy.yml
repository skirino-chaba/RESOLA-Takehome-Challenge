name: Deploy to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript build
        run: npm run build
      
      - name: Run tests
        run: npm test || true
      
      - name: CDK Synth
        run: npx cdk synth --context env=dev

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Verify AWS credentials
        run: |
          echo "Testing AWS credentials..."
          aws sts get-caller-identity || exit 1
      
      - name: Deploy with CDK
        id: deploy
        run: |
          # Verify AWS credentials are working
          echo "AWS Account ID: $(aws sts get-caller-identity --query Account --output text)"
          
          # Bootstrap CDK if needed
          npx cdk bootstrap aws://$(aws sts get-caller-identity --query Account --output text)/us-east-1 || true
          
          # Deploy stacks - this will update existing stacks or create new ones
          npx cdk deploy --all --context env=dev --require-approval never --outputs-file cdk-outputs.json
          
          # Extract URL from CloudFormation
          ALB_URL=$(aws cloudformation describe-stacks --stack-name LiteLLM-Compute-dev --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' --output text 2>/dev/null || echo "")
          if [ -n "$ALB_URL" ]; then
            echo "url=http://$ALB_URL" >> $GITHUB_OUTPUT
            echo "✅ Application URL: http://$ALB_URL"
          else
            echo "⚠️ Could not retrieve ALB URL"
          fi

  deploy-prod:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy with CDK
        id: deploy
        run: |
          npx cdk deploy --all --context env=prod --require-approval never
          echo "url=https://$(aws cloudformation describe-stacks --stack-name LiteLLM-Edge-prod --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontURL`].OutputValue' --output text)" >> $GITHUB_OUTPUT